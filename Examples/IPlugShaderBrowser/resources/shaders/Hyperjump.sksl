// original https://www.shadertoy.com/view/dss3zH
// by valena in 2023-01-13

uniform vec2 iResolution;
uniform float iTime;
uniform vec4 iMouse;

const float PI = 3.14159265359;

vec2 hash22(vec2 p) {
    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));
    p3 += dot(p3, p3.yzx + 19.19);
    return fract((p3.xx + p3.yz) * p3.zy);
}

float hash11(float p) {
    return length(hash22(vec2(p)));
}

float hash21(vec2 co) {
    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);
}

mat2 rmatrix(float a) {    //Rotation matrix
    float c = cos(a);
    float s = sin(a);
    return mat2(c, -s, s, c);
}

float S(float x) {
    return (3.0 * x * x - 2.0 * x * x * x);
}

float noise(vec2 pos) {
    float a = hash21(vec2(floor(pos.x), floor(pos.y)));
    float b = hash21(vec2(ceil(pos.x), floor(pos.y)));
    float c = hash21(vec2(floor(pos.x), ceil(pos.y)));
    float d = hash21(vec2(ceil(pos.x), ceil(pos.y)));

    float s1 = S(pos.x - floor(pos.x));
    float s2 = S(pos.y - floor(pos.y));

    float f = a + 
              (b - a) * s1 +
              (c - a) * s2 +
              (a - b - c + d) * s1 * s2;
    return f;
}

float onoise(in vec2 pos) {
    const float n = 3.0;
    const float delta = 3.1415 / 6.0;
    float sum = 0.0;
    float power = 0.5;

    for (float i = 0.0; i < n; i += 1.0) {
        sum += noise(rmatrix(delta * i) * pos) * power;
        power *= 0.40;
        pos *= 1.9;
    }
    return sum;
}

vec3 getTex(vec2 uv, float off) {
    vec3 col;
    
    float brightness;

    const float N = 2.0;
    const float s = 10.0;
    const float k = 12.0;
    
    float n = floor(uv.y * N);
    uv.y = fract(uv.y * N);
    uv.x += off;
    uv.x /= 50.0;

    float b1 = pow(onoise(uv * s + vec2(0.0, n * 100.0)), 2.5) * k;
    float b2 = pow(onoise(uv * s + vec2(0.0, mod((n + 1.0), N) * 100.0 - s)), 2.5) * k;
    
    brightness = mix(b1, b2, uv.y);
    
    col = mix(vec3(0.01, 0.01, 0.3), vec3(0.3, 0.3, 1.0), brightness);
        
    return col;
}

vec3 getRayDir(vec2 uv, vec3 camDir, float angle) {
    vec3 right = normalize(vec3(camDir.z, 0.0, -camDir.x));
    vec3 up = normalize(cross(camDir, right));
    float t = tan(angle / 2.0);
    
    return (camDir + right * t * uv.x + up * t * uv.y);
}

vec3 getIntersection(vec3 camPos, vec3 camDir) {
    float r = 1.0;
    float t = r / length(camDir.xy);
    return camPos + camDir * t;
}

vec4 main(vec2 fragCoord) {
    vec2 uv = (fragCoord.xy - iResolution.xy * 0.5) / iResolution.x * 2.0;
    vec2 mouseUV = (iMouse.xy - iResolution.xy * 0.5) / iResolution.x * 2.0;
    
    vec2 camAn = vec2(mouseUV.x * PI, mouseUV.y * PI / 2.0);
    float camDist = 2.0;
    
    if (iMouse.xy == vec2(0.0, 0.0))
        camAn = vec2(0.0, 0.0);
    
    vec3 camDir = vec3(sin(camAn.x) * cos(camAn.y), sin(camAn.y), cos(camAn.x) * cos(camAn.y));
    vec3 rayDir = getRayDir(uv, camDir, PI / 2.0);
    
    vec3 p = getIntersection(vec3(0.0), rayDir);
    
    vec3 col = getTex(vec2(p.z, fract(atan(p.x, p.y) / PI * 0.5 + 0.5 + p.z / 100.0)), iTime * 30.0);
    
    //col = vec3(1.0 - p.z / 5.0);
    
    col += vec3(p.z / min(iTime * 10.0, 135.0));
    
    return vec4(col, 1.0);
}